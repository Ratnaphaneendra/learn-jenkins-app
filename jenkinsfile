pipeline {
    agent any
    
    environment{
        BUILD_FILE='comp.text'
        NETLIFY_SITE_ID='f627c551-2ea4-46c0-970a-7cbb9da767d8'
        NETLIFY_AUTH_TOKEN=credentials('netlify-token')
    }

    stages {

        stage('aws'){
            agent{
                docker{
                    image 'amazon/aws-cli'
                    args "--entrypoint=''"
                }
            }
            steps{

                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    // some block
                    sh '''
                    aws --version
                    echo ""Hello s3!"> index.html
                    aws s3 cp index.html s3://learn-jenskins-s3-2024-12-10/index.html
                    '''
                }
                

            }
        }
        stage('Docker image build'){
            steps{
                sh 'docker build -t my-playwright .'
            }
        }
        stage('Build') {
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
                 sh '''
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                 '''
            }
        }
        stage('Test'){
            agent{
                docker{
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps{
                sh '''
                    test -f build/index.html
                    npm test
                '''
            }

            post{
                always{
                    junit 'test-results/junit.xml'
                }
            }
        }

        stage('Deploy Staging') {
            agent{
                docker{
                    image 'my-playwright'
                    reuseNode true
                }
            }
            steps {
                 sh '''
                    echo "Deploying Stage"
                    netlify --version
                    netlify status
                    netlify deploy --dir=build --json > deploy-output.json
                    
                 '''
                 script{
                    env.STAGING_URL = sh(script:"node-jq -r '.deploy_url' deploy-output.json",returnStdout:true)
                 }
            }
        }

        stage('Staging E2E') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    reuseNode true
                }
            }
            environment{
                CI_ENVIRONMENT_URL = "${env.STAGING_URL}"
            }

            steps {
                sh '''
                    npx playwright test
                '''
            }

            post{
                always{
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'HTML Report stagging', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }

        // stage('Approval'){
        //     steps{
        //         timeout(time: 60, unit: 'SECONDS') {
        //             input 'Ready for testing'
        //         }
        //     }
        // }

        stage('Deploy prod') {
            agent{
                docker{
                    image 'my-playwright'
                    reuseNode true
                }
            }
            steps {
                 sh '''
                    echo "Deploying Stage"
                    netlify --version
                    netlify status
                    netlify deploy --dir=build --prod
                 '''
            }
        }

        stage('Prod E2E') {
            agent {
                docker {
                    image 'mcr.microsoft.com/playwright:v1.39.0-jammy'
                    reuseNode true
                }
            }
            environment{
                CI_ENVIRONMENT_URL = 'https://euphonious-mousse-44cd31.netlify.app'
            }

            steps {
                sh '''
                    npx playwright test
                '''
            }

            post{
                always{
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'HTML Report prod', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
        
        
    }

    

}
